<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope) {
  /* widget controller */
  var c = this;
	c.data.expand = (c.options.onload_expand_request_item_stages == "true" );
	$scope.toggle = function($event) {
		c.data.expand = !c.data.expand;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.color-positive {
  color: $brand-success;
}
.color-accent {
  color: $brand-primary;
}
.color-negative {
  color: $brand-danger;
}
.requested-items-flex-container {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    flex-direction: row;
  img.toggle {
    vertical-align: baseline !important;
  }
}
/**/
.stage-on .icon, .stage-off .icon{ margin-right:6px; }
.stage-on, .stage-off { margin-bottom: 6px; }

.l-h-40 {
  line-height: 40px;
}
.list-action {
  display:block;
  padding:0 6px;
  cursor: pointer;
}
.list-action:hover {
  background-color: #fff;
}

button.flex-item {
  padding:0;
  background-color: inherit;
  height: 20px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>custom_request_item_workflow_stages</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Custom Request Item Workflow Stages</name>
        <option_schema>[{"hint":"This will show the expanded view of stages","name":"onload_expand_request_item_stages","section":"other","default_value":"false","label":"OnLoad Expand Request Item Stages","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    var req_item_id = JSUtil.nil(options.req_item_id + '') ? '' : options.req_item_id + '';
    if (!req_item_id) {
        req_item_id = JSUtil.nil(input.req_item_id + '') ? '' : input.req_item_id + '';
    }
    if (!req_item_id) {
        data.error = gs.getMessage("Request Item Not Provided");
        return;
    }
    var sc_req_item = new GlideRecord('sc_req_item');
    sc_req_item.get(req_item_id);

    if (!sc_req_item.isValidRecord()) {
        data.error = gs.getMessage("Invalid Request Item ID");
        return;
    }
	
		data.properties = {'workflow_driven_show_approvers': gs.getProperty("glide.workflow.renderer.workflowdriven.show_approver"),
										 'linear_show_approvers': gs.getProperty("glide.workflow.renderer.linear.show_approver"),
										 'main_flow_show_approvers': gs.getProperty("glide.workflow.renderer.mainflow.show_approver")
										};
	
		data.preferences = {'ui_accessibility' :
							gs.getPreference("glide.ui.accessibility", "false")};
	
    var ref = sc_req_item.stage;
		var refValue = ref.getValue();
		data.display_value = ref.getDisplayValue();
		if (sc_req_item.request.approval == 'requested') {
			data.process_started = false;
			data.display_value = gs.getMessage("Request Approval");
		} else {
			data.process_started = true;
			if (refValue == "request_approved") {
				if ((sc_req_item.context.nil() && sc_req_item.flow_context.nil()) || (!sc_req_item.flow_context.nil() && sc_req_item.flow_context.state == 'QUEUED'))
					data.display_value = gs.getMessage("Initiating");
				else if (refValue == ref.getDisplayValue())
					data.display_value = gs.getMessage("Request Approved");
			}
		}
	
    GlideController.putGlobal('sc_req_item', sc_req_item);
    sc_req_item.putCurrent();
    var renderer = RendererFactory.getRenderer(ref, sc_req_item.sys_id);
    var api = new SNC.RendererAPI(renderer);
    data.renderer = renderer + "";
    var worflow_id = sc_req_item.stage;
    var choiceList;
	var high_contrast = "";
	
	if(data.preferences.ui_accessibility == "true")
			high_contrast = "_high_contrast";
	
    if (renderer == 'Legacy' || renderer == "SCReqItemRenderer") {
				if (ref.getProviderType() == 'PFStagesProvider') {
					choiceList = ref.getStages();
				}
				else {
						var clGenerator = new GlideChoiceListGenerator('sc_req_item', 'stage');
						clGenerator.none = false;
						choiceList = clGenerator.get();
						api.internationalizeChoices(choiceList);
						var wfw;
						if (sc_req_item.stage.hasAttribute('icons') && typeof (this[sc_req_item.stage.getAttribute('icons')]) == "function")
								wfw = new this[sc_req_item.stage.getAttribute('icons')]('sc_req_item.stage');
						else
								wfw = new WorkflowIcons('sc_req_item.stage');
						choiceList = wfw.process(choiceList);
						
				}
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var i = 0; i < choiceList.size(); i++) {
                var choice = choiceList.get(i);
                if (!JSUtil.nil(choice.getValue())) {
                	   if (ref.getProviderType() == 'PFStagesProvider' && choice.getParameter('visible') == false)
						continue;
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.title = choice.getParameter('title') || choice.getLabel();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    if (ref.getProviderType() == 'PFStagesProvider')
												temp.displayValue = temp.title + " (" + temp.state + ")";
										else
												temp.displayValue = temp.title + " (" + temp.label + ")";
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();

                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "Linear" || renderer == "Main flow" || renderer == "Workflow-driven") {
        if (renderer == "Linear" || renderer == "Workflow-driven")
            choiceList = api.getAllWorkflowChoices(current, 'sc_req_item.stage');
        else
            choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');

				var showApprovers = false;
				if (renderer == "Linear")
					showApprovers = data.properties.linear_show_approvers == "true";
				else if (renderer == "Main flow")
					showApprovers = data.properties.main_flow_show_approvers == "true";
				else if (renderer == "Workflow-driven")
					showApprovers = data.properties.workflow_driven_show_approvers == "true";
			
        api.addIconsAndStatus(choiceList);
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var j = 0; j < choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (renderer == "Linear" && !api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (renderer == "Main flow" || renderer == "Workflow-driven") {
                    var isWorkFlow = SNC.WorkflowStageRenderer.isWorkflow('sc_req_item.stage');
                    isVisible = (isWorkFlow == 'false') || ((choice.getParameter('visible') + '') == 'true');
                }
                if (choice.value == '')
                    isVisible = false;

                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();
										if (showApprovers) {
											var approvers = choice.getParameter('approvers');
											var approverArr = [];
											for(var i=0; i<approvers.size(); i++) {
												var approver = approvers.get(i);
												approverArr.push(approver.get('label'));
											}
										}
										temp.approvers = approverArr;
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    temp.displayValue = temp.title + " (" + temp.label + ")"
                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "SimpleProgressBar") {
        choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');
        var showValue = api.getOption('showValue') + '';
        var increment = 100.00 / choiceList.getSize();
        var percentComplete = 0;
        var atEnd = true;

        for (var i = 0; choiceList.getSize() > i; i++) {
            percentComplete += increment;
            if (choiceList.getChoice(i).getParameter('state') + '' === 'active') {
                atEnd = false;
                break;
            }
        }
        data.increment = increment;

        percentComplete = atEnd ? 100 : parseInt(percentComplete);
        if (!JSUtil.nil(choiceList)) {
            var list = [];
            for (var j = 0; j < choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (!api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (choice.value == '')
                    isVisible = false;
                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.selected = choice.getSelected();
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    var isVisible = true;
                    temp.isVisible = isVisible;
                    temp.displayValue = temp.label;

                    var imgsrc = 'progress_pctnotdone.gifx';
                    if (choice.getParameter('state') + '' != 'pending')
                        imgsrc = 'progress_pctdone.gifx';
                    temp.image = imgsrc;
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
				data.showValue = showValue;
			data.percentComplete = percentComplete;
    }
    data.current_stage_msg = gs.getMessage("Current stage: {0}", data.display_value); //We need this for WCAG
    data.approval_stages_msg = gs.getMessage("all stages "); //also for WCAG
    GlideController.removeGlobal('sc_req_item');
    sc_req_item.popCurrent();
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-01-27 17:03:50</sys_created_on>
        <sys_id>66a761bd1bd981508c5143f3cc4bcbfa</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Custom Request Item Workflow Stages</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Custom Service Portal Widgets">526506cc1b89d1508c5143f3cc4bcb99</sys_scope>
        <sys_update_name>sp_widget_66a761bd1bd981508c5143f3cc4bcbfa</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-09-16 13:11:26</sys_updated_on>
        <template><![CDATA[<div ng-if="data.error">
  <h3>
    {{::data.error}}
  </h3>
</div>
<div ng-if="!data.error">
  <div ng-include="'ritm_stage_icons_bar_2'" ng-if="data.renderer == 'Legacy' || data.renderer == 'SCReqItemRenderer' || data.renderer == 'Linear' || data.renderer == 'Main flow' || data.renderer == 'Workflow-driven'">
  </div>
  <div ng-if="data.renderer == 'SimpleProgressBar'" ng-include="'ritm_stage_progress_bar_2'">
  </div>
</div>]]></template>
    </sp_widget>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Custom Service Portal Widgets">526506cc1b89d1508c5143f3cc4bcb99</claim_owner_scope>
        <claim_timestamp>183466ce9630000001</claim_timestamp>
        <metadata_update_name>sp_widget_66a761bd1bd981508c5143f3cc4bcbfa</metadata_update_name>
        <previous_claim_app_version>1.0.4</previous_claim_app_version>
        <previous_claim_name>Custom Service Portal Widgets</previous_claim_name>
        <previous_claim_scope>526506cc1b89d1508c5143f3cc4bcb99</previous_claim_scope>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-09-16 13:11:26</sys_created_on>
        <sys_id>1c532f541b8695108c5143f3cc4bcb79</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-09-16 13:11:26</sys_updated_on>
    </sys_claim>
</record_update>
